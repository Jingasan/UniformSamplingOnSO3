/***** 回転空間 SO(3) の均等なサンプリング *****/


//【 コマンドライン引数 】
// 1. 解像度レベル … 0 ⇒ 1 ⇒ 2 ⇒ 3 ⇒ … ⇒ 13：この順に解像度が密になっていく( 最大は解像度レベル 13 まで )

//【 点群数 】
// コマンドライン引数 0 ： 解像度レベル 0 における点数分 72 点( 約 60°おきの均等サンプリング )
// コマンドライン引数 1 ： 解像度レベル 1 における点数分 576 点( 約 30°おきの均等サンプリング )
// コマンドライン引数 2 ： 解像度レベル 2 における点数分 4,608 点( 約 15°おきの均等サンプリング )
// コマンドライン引数 3 ： 解像度レベル 3 における点数分 36,864 点( 約 7.5°おきの均等サンプリング )
// コマンドライン引数 4 ： 解像度レベル 3 における点数分 294,912 点( 約 3.75°おきの均等サンプリング )
// コマンドライン引数 5 ： 解像度レベル 3 における点数分 2,359,296 点( 約 1.875°おきの均等サンプリング )：この辺りからメモリが足りない可能性あり↓
// コマンドライン引数 6 ： 解像度レベル 3 における点数分 18,874,368 点( 約 0.9375°おきの均等サンプリング )


/*** インクルードファイル ***/

/* 定数の設定 */
#include "Configuration.h"

/* 関数の定義等 */
#include "grid_generation.h"


/*** メイン処理文 ***/
int main( int argc, char** argv ){


	/* プログラム開始のコール */
	cout << "【 プログラム開始 】" << endl;


	/* コマンドライン引数指定エラー時 */
	if( argc < 2 ){
		cout << "Usage: ./S3_Grid <resolution>" << endl;
		exit( -1 );
	}
	
	/* 変数の宣言と初期化 */
	int resolution = atoi( argv[ 1 ] );		// 解像度レベル … 0 ⇒ 1 ⇒ 2 ⇒ 3 ⇒ … の順に解像度が密になる
	bool result;							// 実行結果の判定 … 1：成功, 0：失敗
	

	/* 回転空間 SO(3) の均等なサンプリング( Simple Grid Version ) */
	result = simple_grid( resolution );		// 指定した解像度レベルにおける点を作成出力
	
	
	/* プログラム正常終了時 */
	if( result ){
		cout << ">> Output file is generated." << endl;
		cout << "【 プログラム正常終了 】" << endl;
		system( "pause" );
		exit( 0 );
	}

	/* プログラム異常終了時 */
	else{
		cout << ">> Error: Terminating the program" << endl;
		cout << "【 プログラム異常終了 】" << endl;
		system( "pause" );
		exit( 1 );
	}
}
		
